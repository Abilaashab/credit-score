{"ast":null,"code":"/*\n  Credit Score Calculator — Pure Functions\n  Implements the complete scoring specification for\n  Financial, Credit History, Business Stability, Operational, Risk & Support.\n*/\n\n// ----------- Types -----------\n\n// ----------- Helpers -----------\nconst clamp = (val, min = 0, max = 100) => {\n  if (Number.isNaN(val)) return 0;\n  return Math.min(Math.max(Math.round(val), min), max);\n};\n\n// ----------- Individual Category Calculations -----------\nconst financialScore = f => {\n  const debtRatio = f.monthlySales === 0 ? 100 : f.monthlyEMI / f.monthlySales * 100;\n  let score = 50;\n  score += debtRatio <= 30 ? 20 : debtRatio <= 50 ? 10 : 0;\n  score += Math.min(f.profitMargin * 2, 20);\n  score += Math.min(f.averageBankBalance / 10000, 10);\n  score += f.buildingOwnership === 'own' ? 10 : 0;\n  score += f.itrFiled ? 10 : 0;\n  return clamp(score);\n};\nconst creditHistoryScore = c => {\n  let score = c.cibilScore ? (c.cibilScore - 300) / 5.5 : 50;\n  score -= Math.min(c.pastLoanDefaults * 10, 50);\n  score -= Math.min(c.returnedCheques * 5, 20);\n  score -= Math.min(c.loanApplications * 5, 25);\n  score += Math.min(c.bankingRelationship * 2, 20);\n  score += Math.min(c.fullyRepaidLoans * 5, 15);\n  return clamp(score);\n};\nconst businessStabilityScore = b => {\n  let score = 50;\n  score += Math.min(b.yearsInOperation * 2, 20);\n  score += Math.min(b.annualRevenue / 1000000, 20);\n  score += Math.min(b.numberOfEmployees / 5, 10);\n  score += Math.min(b.shopSize / 100, 10);\n  score += Math.min(b.numberOfBranches * 2, 10);\n  score += b.sellsPrivateLabel ? 5 : 0;\n  return clamp(score);\n};\nconst operationalScore = o => {\n  let score = 50;\n  score += Math.min(o.digitalPaymentsAdoption, 20);\n  score += o.inventoryTurnover === 'weekly' ? 20 : o.inventoryTurnover === 'monthly' ? 10 : o.inventoryTurnover === 'quarterly' ? -10 : -20;\n  score += o.seasonalImpact === 'none' ? 10 : o.seasonalImpact === 'low' ? 5 : o.seasonalImpact === 'medium' ? -5 : -10;\n  score += o.averageMonthlyFootfall >= 3000 ? 10 : o.averageMonthlyFootfall >= 1000 ? 5 : 0;\n  const onlineBonus = (o.onlinePresence.socialMedia ? 5 : 0) + (o.onlinePresence.website ? 5 : 0) + (o.onlinePresence.ecommerce ? 10 : 0);\n  score += Math.min(onlineBonus, 15);\n  score += o.shopTimings >= 12 ? 10 : o.shopTimings >= 10 ? 5 : 0;\n  return clamp(score);\n};\nconst riskSupportScore = r => {\n  let score = 50;\n  score += r.distributorPaymentRegularity ? 10 : -10;\n  score += r.industryType === 'grocery' || r.industryType === 'pharmacy' ? 10 : r.industryType === 'clothing' || r.industryType === 'restaurant' ? -10 : 0;\n  score += r.purposeOfLoan === 'growth' ? 5 : r.purposeOfLoan === 'refinance' ? -5 : 0;\n  if (r.collateralProvided && r.collateralValue && r.loanAmountRequested > 0) {\n    const ratio = r.collateralValue / r.loanAmountRequested;\n    score += ratio >= 2 ? 15 : ratio >= 1.5 ? 10 : ratio >= 1 ? 5 : 0;\n  } else if (!r.collateralProvided) {\n    score -= 10;\n  }\n  return clamp(score);\n};\n\n// ----------- Aggregators -----------\nexport const calculateCategoryScores = inputs => ({\n  financial: financialScore(inputs.financial),\n  creditHistory: creditHistoryScore(inputs.creditHistory),\n  businessStability: businessStabilityScore(inputs.businessStability),\n  operational: operationalScore(inputs.operational),\n  riskSupport: riskSupportScore(inputs.riskSupport)\n});\nexport const calculateOverallScore = scores => {\n  const total = scores.financial * 0.35 + scores.creditHistory * 0.25 + scores.businessStability * 0.2 + scores.operational * 0.1 + scores.riskSupport * 0.1;\n  let rating;\n  if (total >= 85) rating = 'Good';else if (total >= 70) rating = 'Average';else if (total >= 55) rating = 'Bad';else rating = 'Poor';\n  return {\n    total: Math.round(total),\n    rating\n  };\n};","map":{"version":3,"names":["clamp","val","min","max","Number","isNaN","Math","round","financialScore","f","debtRatio","monthlySales","monthlyEMI","score","profitMargin","averageBankBalance","buildingOwnership","itrFiled","creditHistoryScore","c","cibilScore","pastLoanDefaults","returnedCheques","loanApplications","bankingRelationship","fullyRepaidLoans","businessStabilityScore","b","yearsInOperation","annualRevenue","numberOfEmployees","shopSize","numberOfBranches","sellsPrivateLabel","operationalScore","o","digitalPaymentsAdoption","inventoryTurnover","seasonalImpact","averageMonthlyFootfall","onlineBonus","onlinePresence","socialMedia","website","ecommerce","shopTimings","riskSupportScore","r","distributorPaymentRegularity","industryType","purposeOfLoan","collateralProvided","collateralValue","loanAmountRequested","ratio","calculateCategoryScores","inputs","financial","creditHistory","businessStability","operational","riskSupport","calculateOverallScore","scores","total","rating"],"sources":["/home/branchx/Documents/Workspace/cursor- credit score/src/services/creditScoreCalculator.ts"],"sourcesContent":["/*\n  Credit Score Calculator — Pure Functions\n  Implements the complete scoring specification for\n  Financial, Credit History, Business Stability, Operational, Risk & Support.\n*/\n\n// ----------- Types -----------\nexport interface FinancialInputs {\n  monthlySales: number;\n  profitMargin: number;\n  monthlyEMI: number;\n  averageBankBalance: number;\n  buildingOwnership: 'own' | 'rent';\n  itrFiled: boolean;\n}\n\nexport interface CreditHistoryInputs {\n  cibilScore?: number;\n  pastLoanDefaults: number;\n  bankingRelationship: number;\n  returnedCheques: number;\n  fullyRepaidLoans: number;\n  loanApplications: number;\n}\n\nexport interface BusinessStabilityInputs {\n  yearsInOperation: number;\n  annualRevenue: number;\n  numberOfEmployees: number;\n  shopSize: number;\n  numberOfBranches: number;\n  sellsPrivateLabel: boolean;\n}\n\nexport interface OperationalInputs {\n  digitalPaymentsAdoption: number;\n  inventoryTurnover: 'weekly' | 'monthly' | 'quarterly' | 'slower';\n  seasonalImpact: 'none' | 'low' | 'medium' | 'high';\n  averageMonthlyFootfall: number;\n  shopTimings: number;\n  onlinePresence: { socialMedia: boolean; website: boolean; ecommerce: boolean };\n}\n\nexport interface RiskSupportInputs {\n  industryType: 'grocery' | 'pharmacy' | 'electronics' | 'clothing' | 'restaurant' | 'other';\n  purposeOfLoan: 'growth' | 'stock' | 'refinance';\n  distributorPaymentRegularity: boolean; // true = regular\n  collateralProvided: boolean;\n  collateralValue?: number;\n  loanAmountRequested: number;\n}\n\nexport interface AllInputs {\n  financial: FinancialInputs;\n  creditHistory: CreditHistoryInputs;\n  businessStability: BusinessStabilityInputs;\n  operational: OperationalInputs;\n  riskSupport: RiskSupportInputs;\n}\n\nexport interface CategoryScores {\n  financial: number;\n  creditHistory: number;\n  businessStability: number;\n  operational: number;\n  riskSupport: number;\n}\n\n// ----------- Helpers -----------\nconst clamp = (val: number, min = 0, max = 100): number => {\n  if (Number.isNaN(val)) return 0;\n  return Math.min(Math.max(Math.round(val), min), max);\n};\n\n// ----------- Individual Category Calculations -----------\nconst financialScore = (f: FinancialInputs): number => {\n  const debtRatio = f.monthlySales === 0 ? 100 : (f.monthlyEMI / f.monthlySales) * 100;\n  let score = 50;\n  score += debtRatio <= 30 ? 20 : debtRatio <= 50 ? 10 : 0;\n  score += Math.min(f.profitMargin * 2, 20);\n  score += Math.min(f.averageBankBalance / 10_000, 10);\n  score += f.buildingOwnership === 'own' ? 10 : 0;\n  score += f.itrFiled ? 10 : 0;\n  return clamp(score);\n};\n\nconst creditHistoryScore = (c: CreditHistoryInputs): number => {\n  let score = c.cibilScore ? (c.cibilScore - 300) / 5.5 : 50;\n  score -= Math.min(c.pastLoanDefaults * 10, 50);\n  score -= Math.min(c.returnedCheques * 5, 20);\n  score -= Math.min(c.loanApplications * 5, 25);\n  score += Math.min(c.bankingRelationship * 2, 20);\n  score += Math.min(c.fullyRepaidLoans * 5, 15);\n  return clamp(score);\n};\n\nconst businessStabilityScore = (b: BusinessStabilityInputs): number => {\n  let score = 50;\n  score += Math.min(b.yearsInOperation * 2, 20);\n  score += Math.min(b.annualRevenue / 1_000_000, 20);\n  score += Math.min(b.numberOfEmployees / 5, 10);\n  score += Math.min(b.shopSize / 100, 10);\n  score += Math.min(b.numberOfBranches * 2, 10);\n  score += b.sellsPrivateLabel ? 5 : 0;\n  return clamp(score);\n};\n\nconst operationalScore = (o: OperationalInputs): number => {\n  let score = 50;\n  score += Math.min(o.digitalPaymentsAdoption, 20);\n\n  score +=\n    o.inventoryTurnover === 'weekly'\n      ? 20\n      : o.inventoryTurnover === 'monthly'\n      ? 10\n      : o.inventoryTurnover === 'quarterly'\n      ? -10\n      : -20;\n\n  score +=\n    o.seasonalImpact === 'none'\n      ? 10\n      : o.seasonalImpact === 'low'\n      ? 5\n      : o.seasonalImpact === 'medium'\n      ? -5\n      : -10;\n\n  score += o.averageMonthlyFootfall >= 3000 ? 10 : o.averageMonthlyFootfall >= 1000 ? 5 : 0;\n\n  const onlineBonus =\n    (o.onlinePresence.socialMedia ? 5 : 0) +\n    (o.onlinePresence.website ? 5 : 0) +\n    (o.onlinePresence.ecommerce ? 10 : 0);\n  score += Math.min(onlineBonus, 15);\n\n  score += o.shopTimings >= 12 ? 10 : o.shopTimings >= 10 ? 5 : 0;\n\n  return clamp(score);\n};\n\nconst riskSupportScore = (r: RiskSupportInputs): number => {\n  let score = 50;\n  score += r.distributorPaymentRegularity ? 10 : -10;\n\n  score +=\n    r.industryType === 'grocery' || r.industryType === 'pharmacy'\n      ? 10\n      : r.industryType === 'clothing' || r.industryType === 'restaurant'\n      ? -10\n      : 0;\n\n  score += r.purposeOfLoan === 'growth' ? 5 : r.purposeOfLoan === 'refinance' ? -5 : 0;\n\n  if (r.collateralProvided && r.collateralValue && r.loanAmountRequested > 0) {\n    const ratio = r.collateralValue / r.loanAmountRequested;\n    score += ratio >= 2 ? 15 : ratio >= 1.5 ? 10 : ratio >= 1 ? 5 : 0;\n  } else if (!r.collateralProvided) {\n    score -= 10;\n  }\n\n  return clamp(score);\n};\n\n// ----------- Aggregators -----------\nexport const calculateCategoryScores = (inputs: AllInputs): CategoryScores => ({\n  financial: financialScore(inputs.financial),\n  creditHistory: creditHistoryScore(inputs.creditHistory),\n  businessStability: businessStabilityScore(inputs.businessStability),\n  operational: operationalScore(inputs.operational),\n  riskSupport: riskSupportScore(inputs.riskSupport),\n});\n\nexport const calculateOverallScore = (scores: CategoryScores) => {\n  const total =\n    scores.financial * 0.35 +\n    scores.creditHistory * 0.25 +\n    scores.businessStability * 0.2 +\n    scores.operational * 0.1 +\n    scores.riskSupport * 0.1;\n\n  let rating: 'Good' | 'Average' | 'Bad' | 'Poor';\n  if (total >= 85) rating = 'Good';\n  else if (total >= 70) rating = 'Average';\n  else if (total >= 55) rating = 'Bad';\n  else rating = 'Poor';\n\n  return { total: Math.round(total), rating } as const;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}